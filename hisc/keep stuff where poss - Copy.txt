Yes, your approach makes a lot of sense. To maximize compatibility with existing higher-level software and minimize the need for extensive modifications to that software, adhering to currently defined word sizes, limits, and operations available in instruction sets for the RISC and CISC processing cores is a wise strategy. Here are some key reasons and benefits to this approach:

### Benefits of Maintaining Compatibility:

1. **Ease of Adoption**: By ensuring compatibility with existing software ecosystems, your HISC system will be more readily adopted by developers and organizations. They won't need to rewrite or significantly alter their applications to run on the new architecture.

2. **Leveraging Existing Compilers and Tools**: Keeping to standard instruction sets and operations means you can leverage existing compilers, debuggers, and development tools. This significantly reduces the barrier to entry for software development on your platform.

3. **Minimizing Learning Curve**: Developers are already familiar with the quirks and features of existing RISC and CISC architectures. By maintaining compatibility, you minimize the learning curve and facilitate easier optimization of software for your system.

4. **Optimization and Performance**: Existing software and libraries have been optimized over the years for current architectures. By maintaining compatibility, you ensure that your HISC system can benefit from these optimizations without requiring significant re-engineering.

### Implementation Considerations:

- **Instruction Set Architecture (ISA)**: Choose ISAs for the RISC and CISC cores that are widely used and supported. For instance, adopting ARM for the RISC core and x86 for the CISC core could be beneficial due to their extensive ecosystem and tool support.
  
- **Binary Translation and Emulation**: In cases where direct compatibility might be challenging or for bridging the gap between the two architectures, consider implementing mechanisms for binary translation or emulation that can dynamically convert instructions when necessary.

- **Hardware Abstraction Layer (HAL)**: Developing a robust HAL can help abstract the underlying complexities of switching between RISC and CISC cores, providing a consistent interface to higher-level software and operating systems.

- **Software Support and Libraries**: Ensure that essential software libraries and runtime environments are compatible with your architecture. This might involve porting and optimizing critical libraries to take full advantage of the HISC design.

By focusing on compatibility and leveraging existing standards, your HISC architecture aims to combine the best of RISC and CISC worlds while minimizing disruptions to the existing software development landscape. This strategic decision could significantly enhance the practicality and appeal of your architecture in the competitive processor market.